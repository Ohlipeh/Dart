import 'dart:math'; // Usado para gerar n√∫meros aleat√≥rios
import 'package:mysql_client/mysql_client.dart'; // Biblioteca para conectar ao MySQL

// Criando um gerador de n√∫meros aleat√≥rios
final random = Random();

// ----------------------
// LISTAS DE DADOS PR√â-DEFINIDOS
// ----------------------

// Lista de nomes poss√≠veis para clientes
final nomesClientes = [
  "Carlos Silva",
  "Fernanda Souza",
  "Jefferson Lima",
  "Mariana Costa",
  "Ricardo Alves",
  "Patr√≠cia Mendes",
  "Jo√£o Pedro",
  "Sofia Martins",
  "Andr√© Ribeiro",
  "Luciana Torres",
  "Bruno Carvalho",
  "Tatiane Rocha",
  "Felipe Gomes",
  "Juliana Barros",
  "Eduardo Pires",
  "Vanessa Andrade",
];

// Lista de endere√ßos poss√≠veis
final enderecos = [
  "Rua A, 123",
  "Avenida Brasil, 1000",
  "Rua das Flores, 200",
  "Travessa Central, 45",
  "Alameda das Palmeiras, 300",
  "Rua do Com√©rcio, 78",
  "Rua XV de Novembro, 120",
  "Estrada Velha, 450",
];

// Lista de esp√©cies de animais
final especies = [
  "Cachorro",
  "Gato",
  "Coelho",
  "P√°ssaro",
  "Hamster",
  "Tartaruga",
];

// Lista de portes dos animais
final portes = ["Pequeno", "M√©dio", "Grande"];

// Lista de ra√ßas de cachorro
final racasCachorro = [
  "Labrador",
  "Poodle",
  "Bulldog",
  "SRD",
  "Pastor Alem√£o",
  "Golden Retriever",
  "Chow Chow",
  "Shih Tzu",
  "Beagle",
];

// Lista de ra√ßas de gato
final racasGato = ["Persa", "Siam√™s", "SRD", "Angor√°", "Maine Coon", "Sphynx"];

// Lista de poss√≠veis nomes para animais
final nomesAnimais = [
  "Rex",
  "Mia",
  "Luna",
  "Thor",
  "Bella",
  "Simba",
  "Nina",
  "Max",
  "Mel",
  "Fred",
  "Boris",
  "Pipoca",
  "Bidu",
  "Snow",
  "Bolt",
  "Lola",
];

// Tipos de pelo
final pelos = ["Curto", "M√©dio", "Longo"];

// Lista de veterin√°rios
final veterinarios = [
  "Dr. Jo√£o",
  "Dra. Ana",
  "Dr. Paulo",
  "Dra. Carla",
  "Dr. Renato",
  "Dra. Fabiana",
];

// Lista de descri√ß√µes para consultas
final descricoes = [
  "Consulta de rotina",
  "Vacina√ß√£o",
  "Exame de sangue",
  "Tratamento de ferimento",
  "Check-up",
  "Cirurgia",
  "Avalia√ß√£o odontol√≥gica",
  "Exame de imagem",
];

// ----------------------
// FUN√á√ïES AUXILIARES
// ----------------------

// Gera um CPF aleat√≥rio (apenas n√∫meros, sem valida√ß√£o real)
String gerarCpf() {
  return List.generate(11, (_) => random.nextInt(10)).join();
}

// Gera um telefone aleat√≥rio no formato 99999-9999
String gerarTelefone() {
  return "${random.nextInt(90000) + 10000}-${random.nextInt(9000) + 1000}";
}

// Gera uma data aleat√≥ria nos √∫ltimos "anosAtras" anos
String gerarDataAleatoria({int anosAtras = 3}) {
  final hoje = DateTime.now();
  final inicio = DateTime(hoje.year - anosAtras, 1, 1);
  final dias = hoje.difference(inicio).inDays;
  final dataAleatoria = inicio.add(Duration(days: random.nextInt(dias)));
  return "${dataAleatoria.year}-${dataAleatoria.month.toString().padLeft(2, '0')}-${dataAleatoria.day.toString().padLeft(2, '0')}";
}

// Gera um hor√°rio aleat√≥rio no formato HH:mm:ss
String gerarHoraAleatoria() {
  return "${random.nextInt(23).toString().padLeft(2, '0')}:${random.nextInt(60).toString().padLeft(2, '0')}:00";
}

// ----------------------
// PROGRAMA PRINCIPAL
// ----------------------
Future<void> main() async {
  // Criando a conex√£o com o MySQL
  final conn = await MySQLConnection.createConnection(
    host: "localhost", // Endere√ßo do servidor MySQL
    port: 3306, // Porta padr√£o do MySQL
    userName: "root", // Usu√°rio do banco
    password: "29150290", // Senha do banco
    databaseName: "petvida", // Nome do banco de dados
  );

  // Conectando ao banco
  await conn.connect();
  print("‚úÖ Conectado ao MySQL!");

  // Iniciando uma transa√ß√£o
  await conn.execute("START TRANSACTION");

  // La√ßo para inserir v√°rios registros
  for (var i = 0; i < 20; i++) {
    // ----------------------
    // INSERIR CLIENTE
    // ----------------------
    var nomeCliente = nomesClientes[random.nextInt(nomesClientes.length)];
    var cpf = gerarCpf();
    var telefone = gerarTelefone();
    var email = "${nomeCliente.split(' ')[0].toLowerCase()}@mail.com";
    var endereco = enderecos[random.nextInt(enderecos.length)];
    var status = "1"; // Ativo

    // Inserindo no banco de dados
    var clienteRes = await conn.execute(
      "INSERT INTO cliente (nome_cliente, cpf_cliente, telefone_cliente, email_cliente, endereco_cliente, status_cliente) "
      "VALUES (:nome, :cpf, :telefone, :email, :endereco, :status)",
      {
        "nome": nomeCliente,
        "cpf": cpf,
        "telefone": telefone,
        "email": email,
        "endereco": endereco,
        "status": status,
      },
    );

    // Pegando o ID do cliente rec√©m inserido
    var clienteId = clienteRes.lastInsertID;
    print("üë§ Cliente inserido: $nomeCliente (ID: $clienteId)");

    // ----------------------
    // INSERIR ANIMAL
    // ----------------------
    var especie = especies[random.nextInt(especies.length)];
    var raca = especie == "Cachorro"
        ? racasCachorro[random.nextInt(racasCachorro.length)]
        : especie == "Gato"
        ? racasGato[random.nextInt(racasGato.length)]
        : "SRD"; // Para outros animais usamos "Sem Ra√ßa Definida"

    var nomeAnimal = nomesAnimais[random.nextInt(nomesAnimais.length)];
    var idade = (random.nextInt(15) + 1).toString(); // Idade entre 1 e 15 anos

    var animalRes = await conn.execute(
      "INSERT INTO animal (nome_animal, idade_animal, especie, porte_animal, raca, pelo, id_cliente) "
      "VALUES (:nome_animal, :idade, :especie, :porte, :raca, :pelo, :id_cliente)",
      {
        "nome_animal": nomeAnimal,
        "idade": idade,
        "especie": especie,
        "porte": portes[random.nextInt(portes.length)],
        "raca": raca,
        "pelo": pelos[random.nextInt(pelos.length)],
        "id_cliente": clienteId,
      },
    );

    // Pegando o ID do animal rec√©m inserido
    var animalId = animalRes.lastInsertID;
    print("üêæ Animal inserido: $nomeAnimal (ID: $animalId)");

    // ----------------------
    // INSERIR CONSULTA
    // ----------------------
    await conn.execute(
      "INSERT INTO consulta (data_consulta, hora_consulta, veterinario_responsavel, descricao_consulta, id_animal, id_veterinario) "
      "VALUES (:data, :hora, :vet_resp, :descricao, :id_animal, :id_veterinario)",
      {
        "data": gerarDataAleatoria(), // Data aleat√≥ria
        "hora": gerarHoraAleatoria(), // Hora aleat√≥ria
        "vet_resp": veterinarios[random.nextInt(veterinarios.length)],
        "descricao": descricoes[random.nextInt(descricoes.length)],
        "id_animal": animalId,
        "id_veterinario": 1, // Aqui estou fixando para um veterin√°rio ID 1
      },
    );

    print("üìÖ Consulta registrada para animal $animalId");
  }

  // Confirmando a transa√ß√£o no banco
  await conn.execute("COMMIT");

  // Fechando a conex√£o
  await conn.close();
  print("üö™ Conex√£o encerrada.");
}
